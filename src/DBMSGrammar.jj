options{  static = true;  DEBUG_PARSER = false;  IGNORE_CASE = true;}PARSER_BEGIN(DBMSParser)public class DBMSParser{  public static final int PRINT_SYNTAX_ERROR = 0;  public static final int PRINT_CREATE_TABLE = 1;  public static final int PRINT_DROP_TABLE = 2;  public static final int PRINT_DESC = 3;  public static final int PRINT_INSERT = 4;  public static final int PRINT_DELETE = 5;  public static final int PRINT_SELECT = 6;  public static final int PRINT_SHOW_TABLES = 7;    public static void main(String args[]) throws ParseException  {    DBMSParser parser = new DBMSParser(System.in);    System.out.print("DB_2015-11543> ");    while (true)    {      try      {        parser.command();      }      catch (Exception e)      {        printMessage(PRINT_SYNTAX_ERROR);        DBMSParser.ReInit(System.in);      }    }  }  public static void printMessage(int q)  {    switch(q)    {      case PRINT_SYNTAX_ERROR:      	System.out.println("Syntax error");      	break;      case PRINT_CREATE_TABLE:      	System.out.println("\'CREATE TABLE\' requested");      	break;      case PRINT_DROP_TABLE:      	System.out.println("\'DROP TABLE\' requested");      	break;      case PRINT_DESC:      	System.out.println("\'DESC\' requested");      	break;      case PRINT_INSERT:      	System.out.println("\'INSERT\' requested");      	break;      case PRINT_DELETE:      	System.out.println("\'DELETE\' requested");      	break;      case PRINT_SELECT:      	System.out.println("\'SELECT\' requested");      	break;      case PRINT_SHOW_TABLES:      	System.out.println("\'SHOW TABLES\' requested");      	break;    }    System.out.print("DB_2015-11543> ");  }}PARSER_END(DBMSParser)SKIP : { < SPACE : " " > | "\r" | "\t" | "\n" }TOKEN : /* Keywords */{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >
| < CREATE : "create" >| < TABLE : "table" >
| < DROP : "drop" >| < DESC : "desc" >
| < INSERT : "insert" >| < INTO : "into" >
| < DELETE : "delete" >| < FROM : "from">| < SELECT : "select" >
| < SHOW : "show" >| < TABLES : "tables" >| < NULL : "null" >
| < PRIMARY : "primary" >| < KEY : "key" >
| < FOREIGN : "foreign" >| < REFERENCES : "references" >| < AS : "as" >| < WHERE : "where" >| < OR : "or" >| < AND : "and" >| < NOT : "not" >| < IS : "is" >| < VALUES : "values" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < PERIOD : "." >| < COMMA : "," >| < QUOTE : "'" >| < ASTERISK : "*" >| < UNDERSCORE : "_" >| < EQUAL_TO : "=" >| < NOT_EQUAL : "!=" >| < LESS_THAN : "<" >| < GREATER_THAN : ">" >| < GREATER_THAN_OR_EQUAL_TO : ">=" >| < LESS_THAN_OR_EQUAL_TO : "<=" >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >| < OTHERS : ~[] >
}TOKEN : /* Local Regular Expressions */{  < #SIGN : "+" | "-" >| < #DIGIT : [ "0"-"9" ] >| < #ALPHABET : [ "a"-"z", "A"-"Z" ] >| < #NN : (< DIGIT >){2}>| < #NNNN : (< DIGIT >){4}> | < #NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS >	| < SPACE > > | < #NON_QUOTE_SPECIAL_CHARACTERS : "`"|"~"|"!"|"@"|"#"|"$"|"%"|"^"|"&"|"*"|"("|")"|"_"|	"-"|"+"|"="|"{"|"}"|"["|"]"|"|"|":"|";"|"<"|","|">"|"."|"?"|"/"|"\\" >}/** * basic query structure */void command() :{}{  queryList()| (    < EXIT >    < SEMICOLON >    {      System.exit(0);    }  ) }void queryList() :{  int q;}{  (    q = query()    < SEMICOLON >    {      printMessage(q);    }  )+}int query() :{  int q;}{  (    createTableQuery()    {      q = PRINT_CREATE_TABLE;    }  |  	dropTableQuery()  	{  	  q = PRINT_DROP_TABLE;  	}  |   	descQuery()  	{  	  q = PRINT_DESC;  	}  |   	selectQuery()  	{  	  q = PRINT_SELECT;  	}  |   	insertQuery()  	{  	  q = PRINT_INSERT;  	}  |   	deleteQuery()  	{  	  q = PRINT_DELETE;  	}  |   	showTablesQuery()  	{  	  q = PRINT_SHOW_TABLES;  	}  )  (    {      return q;    }  )}/** * common components */// table namevoid tableName() :{}{  < LEGAL_IDENTIFIER >}// column namevoid columnName() :{}{  < LEGAL_IDENTIFIER >}// column name list : (column_name1, column_name2, ...)void columnNameList() :{}{  < LEFT_PAREN >  columnName()  (    < COMMA >    columnName()  )*  < RIGHT_PAREN >}/** * CREATE TABLE query */// create table queryvoid createTableQuery() :{}{  < CREATE >  < TABLE >  tableName()  tableElementList()}// table element listvoid tableElementList() :{}{  < LEFT_PAREN >  tableElement()  (    < COMMA >    tableElement()  )*  < RIGHT_PAREN >}// table elementvoid tableElement() :{}{  columnDefinition()| tableConstraintDefinition()}// column definitionvoid columnDefinition() :{}{  columnName()  dataType()  (    < NOT >    < NULL >  )?}// table constraint definitionvoid tableConstraintDefinition() :{}{  primaryKeyConstraint()| referentialConstraint()}// primary key constraintvoid primaryKeyConstraint() :{}{  < PRIMARY >  < KEY >  columnNameList()}// referential constraintvoid referentialConstraint() :{}{  < FOREIGN >  < KEY >  columnNameList()  < REFERENCES >  tableName()  columnNameList()}// data typesvoid dataType() :{}{  < INT >| (    < CHAR >    < LEFT_PAREN >    < INT_VALUE >    < RIGHT_PAREN >  )| < DATE >}/** * DROP TABLE query */// drop table queryvoid dropTableQuery() :{}{  < DROP >  < TABLE >  tableName()}/** * DESC query */// desc queryvoid descQuery() :{}{  < DESC >  tableName()}/** * SELECT query */// select queryvoid selectQuery() :{}{  < SELECT >  selectList()  tableExpression()}// select listvoid selectList() :{}{  < ASTERISK >| (
  	selectedColumn()
  	(
  	  < COMMA >
  	  selectedColumn()
  	)*
  )
}// selected columnvoid selectedColumn() :{}{  (    LOOKAHEAD(2) // to deal with choice conflict    tableName()    < PERIOD >  )?  columnName()  ( 	< AS >
    columnName()
  )?
}// table expressionvoid tableExpression() :{}{  fromClause()  (    whereClause()  )?}// from clausevoid fromClause() :{}{  < FROM >  tableReferenceList()}// table reference listvoid tableReferenceList() :{}{  referedTable()  (    < COMMA >    referedTable()  )*}// refered tablevoid referedTable() :{}{  tableName()  (    < AS >    tableName()  )?}// where clausevoid whereClause() :{}{  < WHERE >  booleanValueExpression()}// boolean value expressionvoid booleanValueExpression() :{}{  booleanTerm()  (  	< OR >  	booleanTerm()  )*}// boolean termvoid booleanTerm() :{}{  booleanFactor()  (  	< AND >  	booleanFactor()  )*}// boolean factorvoid booleanFactor() :{}{  (    < NOT >  )?  booleanTest()}  // boolean testvoid booleanTest() :{}{  predicate()| parenthesizedBooleanExpression()}// parenthesized boolean expressionvoid parenthesizedBooleanExpression() :{}{  < LEFT_PAREN >  booleanValueExpression()  < RIGHT_PAREN >}// predicatevoid predicate() :{}{  LOOKAHEAD(4) // to deal with choice conflict  comparisonPredicate()| nullPredicate()
}// comparison predicatevoid comparisonPredicate() :{}{  compOperand()  compOp()  compOperand()}// comparison operandvoid compOperand() :{}{  comparableValue()| (  	(  	  LOOKAHEAD(2) // to deal with choice conflict  	  tableName()  	  < PERIOD >  	)?  	columnName()  )}// comparison operatorvoid compOp() :{}{  < EQUAL_TO>| < NOT_EQUAL>| < LESS_THAN>| < GREATER_THAN>| < GREATER_THAN_OR_EQUAL_TO>| < LESS_THAN_OR_EQUAL_TO>}// comparable valuevoid comparableValue() :{}{  < INT_VALUE >| < CHAR_STRING >| < DATE_VALUE >}// null predicatevoid nullPredicate() :{}{  (    LOOKAHEAD(2) // to deal with choice conflict    tableName()    < PERIOD >  )?  columnName()  nullOperation()}// null operationvoid nullOperation() :{}{  < IS >  (    < NOT >  )?  < NULL >}/** * INSERT query */// insert queryvoid insertQuery() :{}{  < INSERT >  < INTO >  tableName()  insertColumnsAndSource()}// insert columns and sourcevoid insertColumnsAndSource() :{}{  (    columnNameList()  )?  valueList()}// value listvoid valueList() :{}{  < VALUES >  < LEFT_PAREN >  value()  (    < COMMA >    value()  )*  < RIGHT_PAREN >}// valuevoid value() :{}{  < NULL >| comparableValue()}/** * DELETE query */// delete queryvoid deleteQuery() :{}{  < DELETE >  < FROM >  tableName()  (    whereClause()  )?}/** * SHOW TABLE query */// show table queryvoid showTablesQuery() :{}{  < SHOW >  < TABLES >}