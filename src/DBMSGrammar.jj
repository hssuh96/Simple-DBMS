options{  static = true;  DEBUG_PARSER = false;  IGNORE_CASE = true;}PARSER_BEGIN(DBMSParser)import java.util.ArrayList;import java.util.Locale;import definition.TableDefinition;import ddl.DDL;import dml.Insert;import dml.Delete;import dml.Value;import dml.types.*;import dml.booleantree.BaseNode;import dml.booleantree.ComparisonPredicateNode;import dml.booleantree.NullPredicateNode;import dml.booleantree.ExpressionNode;import dml.booleantree.EvaluationTree;public class DBMSParser{  public static TableDefinition tableDefinition;  public static String argTableName;  public static Insert insertInstance;  public static Delete deleteInstance;    public static final int PRINT_SYNTAX_ERROR = 0;  public static final int CREATE_TABLE_REQUESTED = 1;  public static final int DROP_TABLE_REQUESTED = 2;  public static final int DESC_REQUESTED = 3;  public static final int INSERT_REQUESTED = 4;  public static final int DELETE_REQUESTED = 5;  public static final int SELECT_REQUESTED = 6;  public static final int SHOW_TABLES_REQUESTED = 7;    public static void main(String args[]) throws ParseException  {    DBMSParser parser = new DBMSParser(System.in);    System.out.print("DB_2015-11543> ");    while (true) {      try {        parser.command();      } catch (ParseException e) {//        e.printStackTrace(); // TODO
        executeCommand(PRINT_SYNTAX_ERROR);        DBMSParser.ReInit(System.in);      } catch (Exception e) {//        e.printStackTrace();
        System.out.println("UnexpectedError");        System.out.print("DB_2015-11543> ");        DBMSParser.ReInit(System.in);      }    }  }  public static void executeCommand(int q)  {    switch(q)    {      case PRINT_SYNTAX_ERROR:      	System.out.println("Syntax error");      	break;      case CREATE_TABLE_REQUESTED:      	DDL.executeCreateTable(tableDefinition);      	break;      case DROP_TABLE_REQUESTED:      	DDL.executeDropTable(argTableName);      	break;      case DESC_REQUESTED:      	DDL.executeDescTable(argTableName);      	break;      case INSERT_REQUESTED:      	insertInstance.executeInsert();      	break;      case DELETE_REQUESTED:      	deleteInstance.executeDelete();      	break;      case SELECT_REQUESTED:      	System.out.println("\'SELECT\' requested");      	break;      case SHOW_TABLES_REQUESTED:      	DDL.executeShowTable();      	break;    }    System.out.print("DB_2015-11543> ");  }}PARSER_END(DBMSParser)SKIP : { < SPACE : " " > | "\r" | "\t" | "\n" }TOKEN : /* Keywords */{  < EXIT : "exit" >| < INT : "int" >| < CHAR : "char" >| < DATE : "date" >| < CREATE : "create" >| < TABLE : "table" >| < DROP : "drop" >| < DESC : "desc" >| < INSERT : "insert" >| < INTO : "into" >| < DELETE : "delete" >| < FROM : "from">| < SELECT : "select" >| < SHOW : "show" >| < TABLES : "tables" >| < NULL : "null" >| < PRIMARY : "primary" >| < KEY : "key" >| < FOREIGN : "foreign" >| < REFERENCES : "references" >| < AS : "as" >| < WHERE : "where" >| < OR : "or" >| < AND : "and" >| < NOT : "not" >| < IS : "is" >| < VALUES : "values" >}TOKEN :{  < SEMICOLON : ";" >| < LEFT_PAREN : "(" >| < RIGHT_PAREN : ")" >| < PERIOD : "." >| < COMMA : "," >| < QUOTE : "'" >| < ASTERISK : "*" >| < UNDERSCORE : "_" >| < EQUAL_TO : "=" >| < NOT_EQUAL : "!=" >| < LESS_THAN : "<" >| < GREATER_THAN : ">" >| < GREATER_THAN_OR_EQUAL_TO : ">=" >| < LESS_THAN_OR_EQUAL_TO : "<=" >| < INT_VALUE : (< SIGN >)? (< DIGIT >)+ >| < CHAR_STRING : < QUOTE > (< NON_QUOTE_CHARACTER >)* < QUOTE > >| < DATE_VALUE : < NNNN > "-" < NN > "-" < NN > >| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >| < OTHERS : ~[] >}TOKEN : /* Local Regular Expressions */{  < #SIGN : "+" | "-" >| < #DIGIT : [ "0"-"9" ] >| < #ALPHABET : [ "a"-"z", "A"-"Z" ] >| < #NN : (< DIGIT >){2}>| < #NNNN : (< DIGIT >){4}> | < #NON_QUOTE_CHARACTER : < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARACTERS >	| < SPACE > > | < #NON_QUOTE_SPECIAL_CHARACTERS : "`"|"~"|"!"|"@"|"#"|"$"|"%"|"^"|"&"|"*"|"("|")"|"_"|	"-"|"+"|"="|"{"|"}"|"["|"]"|"|"|":"|";"|"<"|","|">"|"."|"?"|"/"|"\\" >}/** * basic query structure */void command() :{}{  queryList()| (    < EXIT >    < SEMICOLON >    {      System.exit(0);    }  ) }void queryList() :{  int q;}{  (    q = query()    < SEMICOLON >    {      executeCommand(q);    }  )+}int query() :{  int q;}{  (    createTableQuery()    {      q = CREATE_TABLE_REQUESTED;    }  |  	dropTableQuery()  	{  	  q = DROP_TABLE_REQUESTED;  	}  |   	descQuery()  	{  	  q = DESC_REQUESTED;  	}  |   	selectQuery()  	{  	  q = SELECT_REQUESTED;  	}  |   	insertQuery()  	{  	  q = INSERT_REQUESTED;  	}  |   	deleteQuery()  	{  	  q = DELETE_REQUESTED;  	}  |   	showTablesQuery()  	{  	  q = SHOW_TABLES_REQUESTED;  	}  )  (    {      return q;    }  )}/** * common components */// table nameString tableName() :{  Token t;}{  t = < LEGAL_IDENTIFIER >  { return t.image.toLowerCase(Locale.ENGLISH); }}// column nameString columnName() :{  Token t;}{  t = < LEGAL_IDENTIFIER >  { return t.image.toLowerCase(Locale.ENGLISH); }}// column name list : (column_name1, column_name2, ...)ArrayList<String> columnNameList() :{  ArrayList<String> columnNameList = new ArrayList<String>();  String str;}{  < LEFT_PAREN >  str = columnName()  { columnNameList.add(str); }  (    < COMMA >    str = columnName()    { columnNameList.add(str); }  )*  < RIGHT_PAREN >  {    return columnNameList;  }}/** * CREATE TABLE query */// create table queryvoid createTableQuery() :{  String str;}{  < CREATE >  < TABLE >  str = tableName()  {    tableDefinition = new TableDefinition();    tableDefinition.setTableName(str);  }  tableElementList()}// table element listvoid tableElementList() :{}{  < LEFT_PAREN >  tableElement()  (    < COMMA >    tableElement()  )*  < RIGHT_PAREN >}// table elementvoid tableElement() :{}{  columnDefinition()| tableConstraintDefinition()}// column definitionvoid columnDefinition() :{  String columnName;  String dataType;  boolean notNullFlag = false;}{  columnName = columnName()  dataType = dataType()  (    < NOT >    < NULL >    { notNullFlag = true; }  )?  {    tableDefinition.addColumnDefinition(columnName, dataType, notNullFlag);  }}// table constraint definitionvoid tableConstraintDefinition() :{}{  primaryKeyConstraint()| referentialConstraint()}// primary key constraintvoid primaryKeyConstraint() :{  ArrayList<String> primaryKeyList;}{  < PRIMARY >  < KEY >  primaryKeyList = columnNameList()  {    tableDefinition.setPrimaryKeyDefinition(primaryKeyList);  }}// referential constraintvoid referentialConstraint() :{  String referencedTableName;  ArrayList<String> referencingColumnNames;  ArrayList<String> referencedColumnNames;}{  < FOREIGN >  < KEY >  referencingColumnNames = columnNameList()  < REFERENCES >  referencedTableName = tableName()  referencedColumnNames = columnNameList()  {    tableDefinition.addForeignKeydefinition(referencedTableName, referencingColumnNames, referencedColumnNames);  }}// data typesString dataType() :{  Token t;  String str;}{  (        < INT >    { str = "int"; }  | (      < CHAR >      { str = "char"; }      < LEFT_PAREN >      { str += "("; }      t = < INT_VALUE >      { str += t.image; }      < RIGHT_PAREN >      { str += ")"; }    )  | < DATE >  	{ str = "date"; }  )  {    return str;  }}/** * DROP TABLE query */// drop table queryvoid dropTableQuery() :{}{  < DROP >  < TABLE >  argTableName = tableName()}/** * DESC query */// desc queryvoid descQuery() :{}{  < DESC >  argTableName = tableName()}/** * SELECT query */// select queryvoid selectQuery() :{}{  < SELECT >  selectList()  tableExpression()}// select listvoid selectList() :{}{  < ASTERISK >| (  	selectedColumn()  	(  	  < COMMA >  	  selectedColumn()  	)*  )}// selected columnvoid selectedColumn() :{}{  (    LOOKAHEAD(2) // to deal with choice conflict    tableName()    < PERIOD >  )?  columnName()  ( 	< AS >    columnName()  )?}// table expressionvoid tableExpression() :{  EvaluationTree evaluationTree = null;}{  fromClause()  (    evaluationTree = whereClause()  )?}// from clausevoid fromClause() :{}{  < FROM >  tableReferenceList()}// table reference listvoid tableReferenceList() :{}{  referedTable()  (    < COMMA >    referedTable()  )*}// refered tablevoid referedTable() :{}{  tableName()  (    < AS >    tableName()  )?}// where clauseEvaluationTree whereClause() :{  BaseNode node;}{  < WHERE >  node = booleanValueExpression()  {    return new EvaluationTree(node);  }}// boolean value expressionBaseNode booleanValueExpression() :{  BaseNode node;  BaseNode node2;}{  node = booleanTerm()  (  	< OR >  	node2 = booleanTerm()  	{ node = new ExpressionNode(node, BooleanOperatorType.OR, node2); }  )*  {    return node;  }}// boolean termBaseNode booleanTerm() :{  BaseNode node;  BaseNode node2;}{  node = booleanFactor()  (  	< AND >  	node2 = booleanFactor()  	{ node = new ExpressionNode(node, BooleanOperatorType.AND, node2); }  )*  {    return node;  }}// boolean factorBaseNode booleanFactor() :{  BooleanOperatorType booleanOperatorType = BooleanOperatorType.AND; // temp value  BaseNode node;}{  (    < NOT >    { booleanOperatorType = BooleanOperatorType.NOT; }  )?  node = booleanTest()  {    if (booleanOperatorType == BooleanOperatorType.NOT) {      return new ExpressionNode(node, booleanOperatorType);    }    else {      return node;    }  }}  // boolean testBaseNode booleanTest() :{  BaseNode node;}{  (  	node = predicate()  | node = parenthesizedBooleanExpression()  )  {    return node;  }}// parenthesized boolean expressionBaseNode parenthesizedBooleanExpression() :{  BaseNode node;}{  < LEFT_PAREN >  node = booleanValueExpression()  < RIGHT_PAREN >  {    return node;  }}// predicateBaseNode predicate() :{  BaseNode predicateNode;}{  (  	LOOKAHEAD(4) // to deal with choice conflict  	predicateNode = comparisonPredicate()  | predicateNode = nullPredicate()  )  {    return predicateNode;  }}// comparison predicateComparisonPredicateNode comparisonPredicate() :{  Value value1;  Value value2;  ComparisonOperatorType operatorType;}{  value1 = compOperand()  operatorType = compOp()  value2 = compOperand()  {    return new ComparisonPredicateNode(value1, operatorType, value2);  }}// comparison operandValue compOperand() :{  String str;  String name = "";  Value value;}{  (  	value = comparableValue()  | (  	  (  	  	LOOKAHEAD(2) // to deal with choice conflict  	  	str = tableName()  	  	{ name += str + "."; }  	  	< PERIOD >  	  )?  	  str = columnName()  	  {  	  	name += str;  	  	value = new Value();  	  	value.setColumn(name);  	  }  	)  )  {    return value;  }}// comparison operatorComparisonOperatorType compOp() :{  ComparisonOperatorType operatorType;}{  (  < EQUAL_TO> { operatorType = ComparisonOperatorType.EQUAL_TO; }| < NOT_EQUAL> { operatorType = ComparisonOperatorType.NOT_EQUAL; }| < LESS_THAN> { operatorType = ComparisonOperatorType.LESS_THAN; }| < GREATER_THAN> { operatorType = ComparisonOperatorType.GREATER_THAN; }| < GREATER_THAN_OR_EQUAL_TO> { operatorType = ComparisonOperatorType.GREATER_THAN_OR_EQUAL_TO; }| < LESS_THAN_OR_EQUAL_TO> { operatorType = ComparisonOperatorType.LESS_THAN_OR_EQUAL_TO; }  )  {    return operatorType;  }}// comparable valueValue comparableValue() :{  Token t;  Value value = new Value();}{  (   	t = < INT_VALUE > { value.setInt(t.image); }  | t = < CHAR_STRING > { value.setChar(t.image); }  | t = < DATE_VALUE > { value.setDate(t.image); }  )  {    return value;  }}// null predicateNullPredicateNode nullPredicate() :{  String str;  String name = "";  NullOperatorType nullOperatorType;}{  (    LOOKAHEAD(2) // to deal with choice conflict    str = tableName()    { name += str+"."; }    < PERIOD >  )?  str = columnName()  {    name += str;    Value value = new Value();    value.setColumn(name);  }  nullOperatorType = nullOperation()  {    return new NullPredicateNode(value, nullOperatorType);  }}// null operationNullOperatorType nullOperation() :{  NullOperatorType nullOperatorType = NullOperatorType.IS_NULL;}{  < IS >  (    < NOT >    { nullOperatorType = NullOperatorType.IS_NOT_NULL; }  )?  < NULL >  {    return nullOperatorType;  }}/** * INSERT query */// insert queryvoid insertQuery() :{  String tableName;}{  < INSERT >  < INTO >  tableName = tableName()  insertInstance = insertColumnsAndSource()  { insertInstance.setTableName(tableName); }}// insert columns and sourceInsert insertColumnsAndSource() :{  ArrayList<Value> valueList;  ArrayList<String> columnNameList;}{  {    insertInstance = new Insert();  }  (    columnNameList = columnNameList()    { insertInstance.setColumnNameList(columnNameList); }  )?  valueList = valueList()  {    insertInstance.setValueList(valueList);    return insertInstance;  }}// value listArrayList<Value> valueList() :{  ArrayList<Value> valueList = new ArrayList<Value>();  Value value;}{  < VALUES >  < LEFT_PAREN >  value = value()  { valueList.add(value); }  (    < COMMA >    value = value()    { valueList.add(value); }  )*  < RIGHT_PAREN >  {    return valueList;  }}// valueValue value() :{  Value value = new Value();}{  (  	< NULL > { value.setNull(); }  | value = comparableValue()  )  {    return value;  }}/** * DELETE query */// delete queryvoid deleteQuery() :{  String name;  EvaluationTree evaluationTree = null;}{  < DELETE >  < FROM >  name = tableName()  (    evaluationTree = whereClause()  )?  {    if (evaluationTree == null) {      deleteInstance = new Delete(name);    }    else {      deleteInstance = new Delete(name, evaluationTree);    }  }}/** * SHOW TABLE query */// show table queryvoid showTablesQuery() :{}{  < SHOW >  < TABLES >  }